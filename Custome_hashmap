package Hashmaps.CustomeHashMap;

import java.util.LinkedList;

public class CustomeHashMap {

    static class Custome_HashMap<K,V>{
        public static final int DEFAULT_CAPACITY= 10;
        public static final float LOAD_FACTOR= .75f;
        private class Node{
            K key;
            V value;

            Node(K key, V value){
                this.key=key;
                this.value=value;
            }
        }
        private int size;
        private LinkedList<Node>[] buckets;


        /// HELPER FUNCTIONS

        private int search_linkedlist(LinkedList<Node> ll, K key){
            for (int i = 0; i < ll.size(); i++) {
                if(ll.get(i).key == key){
                    return i;
                }
            }
            return -1;
        }
        private int hash_fun(K key){
            int hc= key.hashCode();
            return ((Math.abs(hc))% buckets.length);
        }
        private  void initBuckets(int N){
            buckets =new LinkedList[N];

            for (int i = 0; i < buckets.length; i++) {
                buckets[i]= new LinkedList<>();
            }

        }

        /// CONSTRUCTORS
        public Custome_HashMap(){
            initBuckets(DEFAULT_CAPACITY);
        }


        /// MAIN FUNCTTIONS

        public int size(){
            return size;
        }

        public void put(K key, V value){
            int hc= hash_fun(key);
            LinkedList<Node> currentBucket= buckets[hc];
            int ei = search_linkedlist(currentBucket,key);
            if (ei == -1){///means key doesnot exists
                Node node= new Node(key, value);
                currentBucket.add(node);
                size++;
            }else {
                Node currentNode= currentBucket.get(ei);
                currentNode.value=value;
            }
        }
        public V get(K key){
            int hc = hash_fun(key);
            LinkedList<Node> currbucket= buckets[hc];
            int ei = search_linkedlist(currbucket,key);
            if (ei ==-1){
                return null;
            }else {
               Node node= currbucket.get(ei);
               return node.value;
            }
        }

        public V remove(K key){
            int hc = hash_fun(key);
            LinkedList<Node> currbucket= buckets[hc];
            int ei = search_linkedlist(currbucket,key);
            if (ei ==-1){
                return null;
            }else {
                Node node= currbucket.get(ei);
                V returnNode= node.value;
                currbucket.remove(ei);
                size--;
                return returnNode;
            }
        }




    }

    public static void main(String[] args) {
       Custome_HashMap<String, Integer> hm= new Custome_HashMap<>();
       hm.put("a",1);
       hm.put("b",2);
       hm.put("c",3);
       hm.remove("c");
        System.out.println(hm.size());
        hm.put("a",22);
        System.out.println(hm.get("a"));
    }
}
